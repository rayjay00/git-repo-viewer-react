{"version":3,"sources":["styles/base.js","components/base/Heading.js","components/base/InputText.js","components/base/Button.js","components/home/Submit.js","components/home/Header.js","components/User.js","components/Info.js","components/Time.js","components/base/Repo.js","components/home/Content.js","serviceWorker.js","index.js"],"names":["StyledHeading","styled","h1","_templateObject","props","error","StyledRepo","div","_templateObject2","card","button","_templateObject3","StyledExtraInfo","p","Heading_templateObject","Heading","_ref","title","react_default","a","createElement","Fragment","href","target","rel","StyledInput","input","InputText_templateObject","InputText","type","id","StyledButton","Button_templateObject","Button","checked","handler","Button_StyledButton","onClick","StyledInputWrapper","Submit_templateObject","Submit","base_InputText","base_Button","StyledHeadingWrapper","Header_templateObject","Header","base_Heading","home_Submit","StyledUserInfo","User_templateObject","StyledUserImg","img","User_templateObject2","StyledUsername","User_templateObject3","User","avatar","username","src","StyledNameWrapper","Info_templateObject","StyledLink","Info_templateObject2","Info","name","description","url","StyledTime","Time_templateObject","Time","time","moment","fromNow","Repo","repo","components_Info","html_url","components_Time","updated_at","StyledRepos","section","Content_templateObject","Content","repos","map","base_Repo","key","Boolean","window","location","hostname","match","UserRepo","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","owner","_this2","document","getElementById","value","axios","get","concat","then","res","data","console","log","setState","catch","_this$state","home_Header","bind","keys","length","components_User","home_Content","React","Component","ReactDOM","render","src_UserRepo","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.14a48a3c.chunk.js","sourcesContent":["import styled from 'styled-components';\n//This file contains anything that is in the \"compnoents/layout\" folder. These are the components that would make sense to be able to reuse in the future if this project is expanded.\n\nexport const StyledHeading = styled.h1`\n    font-family: 'Asap', sans-serif;\n    color: black;\n    ${(props) => props.error && `text-align: center;` };\n    ${(props) => props.error || `margin-bottom: 0.2rem;` };\n`;\n\nexport const StyledRepo = styled.div`\n    margin: 1rem 0 0 0;\n    ${(props) => props.card && \n        `display: flex;\n        justify-content: space-around;\n        margin: 0 auto;\n        margin-top: 1rem;\n        padding: 1rem 0;\n        @media screen and (min-width: 551px) {\n            width: 20%;\n        }\n    ` };\n    background-color: white;\n    color: black;\n    font-family: 'Asap', sans-serif;\n    border: 1px solid rgb(95, 106, 125);\n    transition: border 0.2s ease-in-out;\n    border-radius: 3px;\n    width auto;\n    padding: 1rem;\n    ${(props) => props.card || \n        `\n            @media screen and (min-width: 551px) {\n                width: 48%;\n            }\n            @media screen and (min-width: 768px) {\n                width: 30%;\n            }\n    ` };\n    :hover {\n        border: 1px solid rgb(84, 114, 204);\n    }\n`;\n\nexport const StyledButton = styled.button`\n    background-color: ${(props) => props.error ? \"red\" : \"#000000\" };\n    border-radius: 0;\n    border: 0;\n    font-family: 'Asap', sans-serif;\n    color: white;\n    font-size: 1.5vh;\n    text-transform: capitalize;\n    margin: 0;\n    height: 2.3rem;\n    flex: 0.8;\n`;\n","import React from 'react';\nimport { StyledHeading } from '../../styles/base.js';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledExtraInfo = styled.p`\n    margin: 0;\n    font-size: 1.4vh;\n    margin-bottom: 0.3rem;\n`;\n\n//card prop is going to be true or false and will let the button know if it's part of the github project card\nconst Heading = ({ title }) => {\n    return (\n        <>\n            <StyledHeading>\n            { title }\n            </StyledHeading>\n            <StyledExtraInfo>Made by <a href=\"https://www.github.com/rayjay00\" target=\"_blank\" rel=\"noopener noreferrer\">Ryan</a>.</StyledExtraInfo>\n        </>\n    );\n}\n\nHeading.propTypes = {\n    title: PropTypes.string\n}\n\nexport default Heading;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledInput = styled.input`\n    height: 100%;\n    height: 2rem;\n    -webkit-appearance:none;\n    flex: 1;\n`;\n\nconst InputText = () => {\n    return (\n        <StyledInput type=\"text\" id=\"user\" />\n    );\n}\n\nexport default InputText;","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledButton = styled.button`\n    background-color: ${(props) => props.error ? \"red\" : \"#000000\" };\n    border-radius: 0;\n    border: 0;\n    font-family: 'Asap', sans-serif;\n    color: white;\n    font-size: 1.5vh;\n    text-transform: capitalize;\n    margin: 0;\n    height: 2.3rem;\n    flex: 0.6;\n`;\n\n//card prop is going to be true or false and will let the button know if it's part of the github project card\nconst Button = ( {error, checked, type, card, handler }) => {\n    return (\n        <StyledButton onClick={ handler } type={ type } error={ error }>\n            {card ? 'See on GitHub' :\n            (checked ? 'Search Again' : 'Search For a User')}\n        </StyledButton>\n    );\n}\n\nButton.propTypes = {\n    error: PropTypes.bool.isRequired,\n    checked: PropTypes.bool.isRequired,\n    card: PropTypes.bool,\n    text: PropTypes.string,\n    type: PropTypes.string,\n    handler: PropTypes.func\n}\n\nexport default Button;","import React from 'react';\nimport InputText from '../base/InputText';\nimport Button from '../base/Button';\nimport styled from 'styled-components';\n\n//I placed these styles here instead of the base.js file since I don't anticipate reusing this wrapper. \nconst StyledInputWrapper = styled.div`\n    display: flex;\n    @media screen and (min-width: 551px) {\n        width: 70%;\n    }\n    @media screen and (min-width: 768px) {\n        width: 50%;\n    }\n    @media screen and (min-width: 1261px) {\n        width: 25%;\n    }\n`;\n\nconst Submit = ({ checked, error, handler }) => {\n    return (\n        <StyledInputWrapper>\n            <InputText />\n            <Button checked={ checked } error={ error } handler={ handler }/>\n        </StyledInputWrapper>\n    );\n}\n\nexport default Submit;\n    \n","import React from 'react';\nimport Heading from '../base/Heading';\nimport Submit from './Submit';  \nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\n//These styles won't go in \"base\" because they won't be reused\nconst StyledHeadingWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-family: 'Asap', sans-serif;\n`;\n\nconst Header = ({ title, checked, error, handler }) => {\n    return (\n        <StyledHeadingWrapper>\n            <Heading title={ title } />\n            <Submit checked={ checked } error={ error } handler={ handler }/>\n        </StyledHeadingWrapper>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    checked: PropTypes.bool.isRequired,\n    error: PropTypes.bool.isRequired,\n    handler: PropTypes.func.isRequired\n}\n\nexport default Header;","import React from 'react'\nimport { StyledRepo } from '../styles/base';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledUserInfo = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst StyledUserImg = styled.img`\n    max-height: 20vh;\n`;\n\nconst StyledUsername = styled.p`\n    text-align: center;\n`;\n\nconst User = ({ avatar, username }) => {\n        return (\n            <StyledRepo card={ true }>\n                <StyledUserInfo>\n                    <StyledUserImg src={ avatar } />\n                    <StyledUsername>{ username }</StyledUsername>\n                </StyledUserInfo>\n            </StyledRepo>  \n        )\n}\n\nUser.propTypes = {\n    username: PropTypes.string.isRequired,\n    avatar: PropTypes.string\n}\n\nexport default User;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledNameWrapper = styled.div`\n    color: black;\n    letter-spacing: 0.05rem;\n    font-weight: 400;\n`;\n\nexport const StyledLink = styled.a`\n    background-color: #000000;\n    border-radius: 3px;\n    border: 0;\n    font-family: 'Asap', sans-serif;\n    color: white;\n    font-size: 1rem;\n    text-transform: capitalize;\n    margin: 0;\n    flex: 0.6;\n    padding: 0.6rem 0.5rem;\n    text-decoration: none !important;\n    float: right;\n    height: auto;\n    margin: 0.2rem 0;\n`;\n\nconst Info = ({ name, description, url }) => {\n    return (\n        <>\n            <StyledNameWrapper>\n                <h4>{ name }</h4>\n                <p>{ description }</p>\n                <StyledLink href={ url } >See it on GitHub</StyledLink>\n            </StyledNameWrapper>\n        </>\n    )\n}\n\nInfo.propTypes = {\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    href: PropTypes.string\n}\n\nexport default Info;\n","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n \n\nconst StyledTime = styled.p`\n    font-size: 1rem;\n    color: #00a1fe;\n    text-align: right;\n    text-transform: capitalize;\n    clear: both;\n    margin: 4rem 0 0 0;\n`;\n\nconst Time = ( { time }) => {\n    return (\n        <StyledTime>\n            Last Updated: {moment(time).fromNow()}\n        </StyledTime>\n    );\n}\n\n\nexport default Time;","import React from 'react';\nimport { StyledRepo } from '../../styles/base';\nimport Info from '../Info';\nimport Time from '../Time';\n\nconst Repo = ({ repo }) => {\n    return (\n        <StyledRepo>\n            <Info name={repo.name} description={repo.description} url={repo.html_url} />\n            <Time time={repo.updated_at} />\n        </StyledRepo>\n    )\n}\n\nexport default Repo;\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Repo from '../base/Repo';\nimport styled from 'styled-components';\n//These styles are specific to this component so it is not in 'base', which is for more reusable components\nconst StyledRepos = styled.section`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n`;\n\nconst Content = ({ repos }) => {\n    return (\n        <StyledRepos>\n            {repos.map(repo =>\n                <Repo key={ repo.id } repo={ repo } />\n            )}\n        </StyledRepos>\n    )\n}\n\nContent.propTypes = {\n    repos: PropTypes.array.isRequired\n}\n\nexport default Content;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Header from '../src/components/home/Header';\nimport User from './components/User';\nimport Content from './components/home/Content';\nimport { StyledHeading } from '../src/styles/base';\nimport axios from 'axios';\nimport * as serviceWorker from './serviceWorker';\nclass UserRepo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            repos: [],\n            username: \"\",\n            checked: false,\n            error: false,\n            owner: \"\"\n        };\n    }\n    //this handler is passed down to the to the InputText component \n    handler() {\n        const username = document.getElementById(\"user\").value;\n        //is there a way to grab username from state? when i trie, I had to click the submit button twice\n        axios.get(`https://api.github.com/users/${username}/repos`)\n        \n        .then(res => {\n            const repos = res.data;\n            console.log('repos', repos);\n            //I thought about rendering the state in another \"then\"\n            this.setState({\n                //I'm still debating this next line\n                repos: repos,\n                username: username,\n                checked: true,\n                error: false,\n                owner: repos[0][\"owner\"],\n                avatar: repos[0][\"owner\"][\"avatar_url\"]\n            })\n        })\n        .catch((error) => {\n            console.log(\"error\", error);\n            this.setState({\n                error: true\n            })\n        })\n    }\n   \n    render() {\n        const {repos, checked, error, owner, username, avatar} = this.state;\n        return (\n            <>\n                <Header title=\"Search for a GitHub User\" checked={ checked } error={ error } handler={ this.handler.bind(this) }/>\n                { error ?\n                    <StyledHeading error={ error }>Oops... Looks like that user doesn't exist. Try again!</StyledHeading>\n                    :\n                    <>\n                        { Object.keys(owner).length > 0 && <User username={ username } avatar={ avatar }/> }\n                        { repos.length > 1 && <Content repos={ repos } /> }\n                    </>\n                }\n            </>\n        );\n    }\n}\n\nReactDOM.render(<UserRepo/>, document.getElementById('root'));\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}